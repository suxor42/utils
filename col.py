class autodict(dict):
    def __init__(self, *args, **kwargs):
        super(autodict, self).__init__(*args, **kwargs)
        self.__autogenerated__ = False
        for (k, v) in map(self._transform, self._traverse(self)):
            self[k] = v

    def _traverse(self, dictionary):
        for key, value in dictionary.items():
            if isinstance(value, dict):
                yield (key, value)
                self._traverse(value)
            else:
                yield (key, value)

    def _transform(self, (key, value)):
        if isinstance(value, dict):
            return (key, autodict(value))
        else:
            return (key, value)

    def __missing__(self, key):
        newdict = autodict()
        newdict.__autogenerated__ = True
        self[key] = newdict
        return self[key]

    def isautogenerated(self):
        return self.__autogenerated__

